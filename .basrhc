# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# CUDA
export CUDA=10.2
export PATH=/usr/local/cuda-$CUDA/bin${PATH:+:${PATH}}
export CUDA_PATH=/usr/local/cuda-$CUDA
export CUDA_HOME=/usr/local/cuda-$CUDA
export LIBRARY_PATH=$CUDA_HOME/lib64:$LIBRARY_PATH
export LD_LIBRARY_PATH=/usr/local/cuda-$CUDA/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}
export LD_LIBRARY_PATH=/usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH
export NVCC=/usr/local/cuda-$CUDA/bin/nvcc
export CFLAGS="-I$CUDA_HOME/include $CFLAGS"
export CMAKE_PREFIX_PATH=$CMAKE_PREFIX_PATH:$LCM_INSTALL_PREFIX
export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:$LCM_LIBRARY_DIR/pkgconfig

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi
alias condaenv="export PATH=/home/knapsack/software/anaconda3/bin:$PATH"
alias py36="source activate py36"
alias py37="source activate py37"
alias ase389="source activate ASE389"

alias killgazeboros="killall -9 rosout rosnodes roslaunch gzserver nodelet robot_state_publisher gzclient rosmaster"
alias sros="source /opt/ros/melodic/setup.bash"
alias lws="source ~/workspaces/laikago_ws/devel/setup.bash"
alias sws="source ~/workspaces/spot_ws/devel/setup.bash && source ~/.bashrc"
alias luws="source ~/workspaces/locomotion_ws/devel/setup.bash"
#alias aws="source ~/workspaces/a1_ws/devel/setup.bash"
alias uws="source ~/workspaces/unitree_ws/devel/setup.bash"
alias fws="source ~/workspaces/find_ws/devel/setup.bash"
alias pws="source ~/workspaces/prediction_ws/devel/setup.bash"
alias aws="source ~/workspaces/autonomy_ws/devel/setup.bash"
alias puckconnect="sudo ifconfig enx3c8cf8ff943a up && sudo ip addr add 192.168.1.200 dev enx3c8cf8ff943a && sudo route add -net 192.168.1.0 netmask 255.255.255.0 dev enx3c8cf8ff943a"
alias cdam="cd ~/workspaces/autonomy_ws/src/a1_autonomy"
alias cdut="cd ~/workspaces/autonomy_ws/src/a1_autonomy/unitree_ros/unitree_legged_real"
alias cdpnc="cd ~/project/locomotion/src/PnC"


alias x86connect="cd ~/workspaces/locomotion_ws/src/unitree_ros/unitree_legged_real && ./ipconfig.sh"

# export GAZEBO_MODEL_PATH=/home/knapsack/workspaces/find_ws/src/gym_ped_sim/actor_plugin/models
export GAZEBO_MODEL_PATH=/home/knapsack/workspaces/locomotion_ws/src #:$GAZEBO_MODEL_PATH
export GAZEBO_PLUGIN_PATH=/home/knapsack/workspaces/locomotion_ws/devel/lib #:$GAZEBO_PLUGIN_PATH
export UNITREE_LEGGED_SDK_PATH=/home/knapsack/robots/unitree_legged_sdk
export UNITREE_PLATFORM="amd64"

alias epuri="export ROS_MASTER_URI=http://192.168.2.211:11311"
alias epurizilker="export ROS_MASTER_URI=http://192.168.2.156:11311"
alias epurinuc="export ROS_MASTER_URI=http://192.168.2.194:11311"
alias epurinuc="export ROS_MASTER_URI=http://192.168.2.194:11311"
alias epip="export ROS_IP=192.168.2.211"

alias setrmnuc="export ROS_MASTER_URI=http://192.168.2.194:11311"
alias setri="export ROS_IP=192.168.2.211"
alias vbs="vim ~/.bashrc"
alias sbs="source ~/.bashrc"


# export ROS_PACKAGE_PATH=~/workspaces/spot_ws/src/graph_navigation:$ROS_PACKAGE_PATH    
# export ROS_PACKAGE_PATH=~/workspaces/spot_ws/src/amrl_msgs:$ROS_PACKAGE_PATH
# export ROS_PACKAGE_PATH=~/workspaces/spot_ws/src/enml:$ROS_PACKAGE_PATH
# export ROS_PACKAGE_PATH=/home/knapsack/workspaces/find_ws/src/spot_simulation:/home/knapsack/workspaces/find_ws/src/spot_simulation/amrl_msgs:/home/knapsack/workspaces/find_ws/src/spot_simulation/amrl_maps:$ROS_PACKAGE_PATH
# export ROS_PACKAGE_PATH=/home/knapsack/workspaces/find_ws/src/spot_simulation:/home/knapsack/workspaces/find_ws/src/spot_simulation/amrl_msgs:/home/knapsack/workspaces/find_ws/src/spot_simulation/amrl_maps:$ROS_PACKAGE_PATH

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
# __conda_setup="$('/home/knapsack/software/anaconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
# if [ $? -eq 0 ]; then
#     eval "$__conda_setup"
# else
#     if [ -f "/home/knapsack/software/anaconda3/etc/profile.d/conda.sh" ]; then
#         . "/home/knapsack/software/anaconda3/etc/profile.d/conda.sh"
#     else
#         export PATH="/home/knapsack/software/anaconda3/bin:$PATH"
#     fi
# fi
# unset __conda_setup
# <<< conda initialize <<<

